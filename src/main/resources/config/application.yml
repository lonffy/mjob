server:
  tomcat:
    uri-encoding: UTF-8

spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/mjob?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&useSSL=false&serverTimezone=GMT%2B8
    username: root
    password: 123456
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      initial-size: 5
      max-active: 20
      min-idle: 5
      max-wait: 60000
      # 配置隔多久进行一次检测(检测可以关闭的空闲连接)
      time-between-eviction-runs-millis: 6000
      # 配置连接在池中的最小生存时间
      min-evictable-idle-time-millis: 300000
      validation-query: select 1 from dual
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      ## 配置监控统计拦截的filters，去掉后监控界面sql无法统计
      # config:指定了之后就会读取并解密数据库密码
      # stat:统计相关
      # wall:sql防火墙相关，防止SQL注入
      # slf4j:日志相关
      filters: config,stat,wall,slf4j
      ## 监控过滤
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: '*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*'
      ## 监控页面配置
      stat-view-servlet:
        # 是否允许重置数据 禁用HTML页面上的“Reset All”功能
        reset-enable: true
        # 帐号
        login-password: 123456
        # 密码
        login-username: admin
        # 页面地址
        url-pattern: /druid/*
        # 白名单 多个ip逗号隔开
        allow: 127.0.0.1
        # IP黑名单 (存在共同时，deny优先于allow) : 如果满足deny的话提示:Sorry, you are not permitted to view this page.
        deny: 192.168.1.3
      # druid数据库密码加密看这里:https://blog.csdn.net/k21325/article/details/78627824
      # 加密命令:
      # C:\Users\asus\.m2\repository\com\alibaba\druid\1.0.29>
      # java -cp .\druid-1.0.29.jar com.alibaba.druid.filter.config.ConfigTools your password
      # 直接在IDEA工具打开CMD窗口
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录, config.decrypt=true;config.decrypt.key={公钥}
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000;config.decrypt=false;config.decrypt.key=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAOtSCD1YJ3t14Q75XSK0hB6o2kF4gr375MVnFBbzVYJzSOKdXMd2xuo/iQ+V7lTKIxAGg3rE1fwkxnPBrfiI/N8CAwEAAQ==



  quartz:
    jobStoreType: jdbc
    jdbc:
      initialize-schema: never #不初始化表结构
    properties:
      org:
        quartz:
          scheduler:
            instanceId: AUTO #默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段
            #instanceName: clusteredScheduler #quartzScheduler
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX #持久化配置
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate #我们仅为数据库制作了特定于数据库的代理
            useProperties: false #以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。
            tablePrefix: qrtz_  #数据库表前缀
            misfireThreshold: 60000 #在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。
            clusterCheckinInterval: 5000 #设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。
            isClustered: true #打开群集功能
          threadPool: #连接池
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true



